<input type="hidden" id="shopData" value="<%= @shop %>" />
<h1 class="home_title">マップから近くのお店を検索</h1>
<!-- マップを表示する領域-->
<div id='map'></div>
<!-- Google マップのAPIを読み込んでる　「&callback=initMap」これを書かないとGoogle マップの機能が使えない → new googleとかその辺のやつ-->
<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlqKn88pQQQXhG-gdZOLnc7y4BLlA5uCo&callback=initMap"></script>

<script>
// from rails
//railsから渡されたデータをJSで扱えるように変換　→　変換されたデータがjson shopdataに入ってる
const shopData = document.getElementById('shopData').value;
const jsonShopData = JSON.parse(shopData);
let shopContent = [];
let shopLat;
let shopLng;

console.log(jsonShopData);

jsonShopData.forEach(element => {
    // localStorageの中から店舗の住所を検索して,適合するものをshopLatに入れている.
    if(localStorage.getItem('lat : ' + element.shop_address)) {
        shopLat = localStorage.getItem('lat : ' + element.shop_address);
    } else {
         // localStorage内に当てはまる住所がなかったら0を当てはめる
        shopLat = 0;
    }
    if(localStorage.getItem('lng : ' + element.shop_address)) {
        shopLng = localStorage.getItem('lng : ' + element.shop_address);
    } else {
        // cannot get lng
        shopLng = 0;
    }
    //　shopcontentはお店のdataが入っていて,shop(吹き出しの中のhtml),緯度と軽度の三つが入っている
    shopContent.push({
        shop: 
        '<div style="color:#333333; text-align:center;">' +
        '<h3 style="border-bottom: dotted 2px #333;">' + element.shop_name + '</h3>' +
        '<div style="margin:20px;">' +
        '<p><b>電話番号</b> : 09012345678</p>' +
        '<p><b>営業時間</b> : 08:00~20:00</p>' +
        '<a href="https//www.google.com">店舗pageへ飛ぶ</a>' + 
        '</div>' +
        '</div>',
        lat: parseFloat(shopLat),
        lng: parseFloat(shopLng)
    });
    //　parseFloatはlocalStorageから持ってきた出たは文字列型で入っているので実数に変換
});

function initMap() {
    const geocoder = new google.maps.Geocoder;
    //　マップの初期設定.　中心やzoomを設定している
    const defaultSettings = {
        zoom: 15,
        center:
        {
            lat: 35.6811673, 
            lng: 139.7670516
        }
    };
    const map = new google.maps.Map(
        // mapっていうidがついたdivに対して,マップを適用させている
        document.querySelector('#map'),
        defaultSettings
    );

    let currentWindow;

    //　お店の情報が入っているshopContentを使って,処理を行う
    shopContent.map(data => {
        // マーカーをつける
        const marker = new google.maps.Marker({
            position: {lat: data.lat, lng: data.lng},
            map: map
        });

        // マーカークリックしたら吹き出しを表示
        marker.addListener('click', () => {
            //　吹き出しでてたら閉じる.初期化処理をしている
            currentWindow && currentWindow.close();
            //　お店の情報を吹き出しに適用
            const infoWindow = new google.maps.InfoWindow({content: data.shop});
            //吹き出しを表示
            infoWindow.open(map, marker);
            currentWindow = infoWindow;
        });
    });

    //住所から緯度軽度に変換
    jsonShopData.forEach(element => {
        if (geocoder) {
            geocoder.geocode( 
                {'address': element.shop_address, 'region': 'jp'},
                function(results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        let bounds = new google.maps.LatLngBounds();
                        for (let r in results) {
                            if (results[r].geometry) {
                                let latlng = results[r].geometry.location;
                                bounds.extend(latlng);
                                //　localStorageに緯度と軽度を一つずつ変数に入れている
                                localStorage.setItem('lat : ' + element.shop_address, latlng.lat());
                                localStorage.setItem('lng : ' + element.shop_address, latlng.lng());
                            }
                        }
                    } else {
                        alert("Geocode 取得に失敗しました reason: "
                            + status);
                        }
                }
            );
        }
    });
}
</script> 

